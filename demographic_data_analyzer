
import pandas as pd


def calculate_demographic_data(print_data=True):
    # Read data from file
    column_names = ['age', 'work_class', 'final_weight', 'education', 'education_num', 'marital_status',
                    'occupation', 'relationship', 'race', 'sex', 'capital_gain', 'capital_loss',
                    'hours_per_week', 'native_country', 'income']
    df = pd.read_csv("adult.data", header=None, names=column_names, sep=",", skipinitialspace=True)


    # How many of each race are represented in this dataset? This should be a Pandas series with race names as the index labels.
    race_count = df['race'].value_counts()

    # What is the average age of men?
    male_df = df[df["sex"] == "Male"]
    average_age_men = round(male_df["age"].mean(), 1)

    # What is the percentage of people who have a Bachelor's degree?
    df["education"] = df["education"]
    total_people = len(df)
    bachelor_count = len(df[df["education"] == "Bachelors"])
    percentage_bachelors = round((bachelor_count/ total_people) * 100, 1)

    # What percentage of people with advanced education (`Bachelors`, `Masters`, or `Doctorate`) make more than 50K?
    # What percentage of people without advanced education make more than 50K?

    # with and without `Bachelors`, `Masters`, or `Doctorate`
    adv_degrees = ["Bachelors", "Masters", "Doctorate"]
    higher_edu = df[df["education"].isin(adv_degrees)]
    lower_edu = df[~df["education"].isin(adv_degrees)]

    higher_edu_rich = df[(df['education'].isin(adv_degrees)) & (df['income'] == '>50K')]
    lower_edu_rich = df[(~df['education'].isin(adv_degrees)) & (df['income'] == '>50K')]

    # percentage with salary >50K
    higher_education_rich = round((len(higher_edu_rich) / len(higher_edu)) * 100, 1)
    lower_education_rich = round((len(lower_edu_rich) / len(lower_edu)) * 100, 1)

    # What is the minimum number of hours a person works per week (hours-per-week feature)?
    min_work_hours = df['hours_per_week'].min()

    # What percentage of the people who work the minimum number of hours per week have a salary of >50K?

    num_min_workers = df[df["hours_per_week"] == min_work_hours]
    rich_min_workers = df[df["hours_per_week"] == min_work_hours & (df['income'] == '>50K')]
    rich_percentage = (len(rich_min_workers) / len(num_min_workers)) * 100

    # What country has the highest percentage of people that earn >50K?
    # Filter rich people
    rich_people = df[df['income'] == '>50K']

    # Group by country and calculate rich / total per country
    country_rich_percent = (rich_people['native_country'].value_counts() / df['native_country'].value_counts()) * 100
    country_rich_percent = country_rich_percent.dropna()

    # Get the country with the highest percentage
    highest_earning_country = country_rich_percent.idxmax()
    highest_earning_country_percentage = round(country_rich_percent.max(), 1)

    # Identify the most popular occupation for those who earn >50K in India.
    india_rich = df[(df["native_country"] == "India") & (df['income'] == '>50K')]
    top_IN_occupation = india_rich['occupation'].value_counts().idxmax()

    # DO NOT MODIFY BELOW THIS LINE

    if print_data:
        print("Number of each race:\n", race_count)
        print("Average age of men:", average_age_men)
        print(f"Percentage with Bachelors degrees: {percentage_bachelors}%")
        print(f"Percentage with higher education that earn >50K: {higher_education_rich}%")
        print(f"Percentage without higher education that earn >50K: {lower_education_rich}%")
        print(f"Min work time: {min_work_hours} hours/week")
        print(f"Percentage of rich among those who work fewest hours: {rich_percentage}%")
        print("Country with highest percentage of rich:", highest_earning_country)
        print(f"Highest percentage of rich people in country: {highest_earning_country_percentage}%")
        print("Top occupations in India:", top_IN_occupation)

    return {
        'race_count': race_count,
        'average_age_men': average_age_men,
        'percentage_bachelors': percentage_bachelors,
        'higher_education_rich': higher_education_rich,
        'lower_education_rich': lower_education_rich,
        'min_work_hours': min_work_hours,
        'rich_percentage': rich_percentage,
        'highest_earning_country': highest_earning_country,
        'highest_earning_country_percentage':
        highest_earning_country_percentage,
        'top_IN_occupation': top_IN_occupation
    }
